# https://lakur.tech/2021/12/10/fix-slow-zsh-startup-nvm/
export NVM_LAZY=1

# /opt/homebrew/bin is not loaded by default make sure it is always there
export PATH=/opt/homebrew/bin:$PATH

[[ -f ~/.zsh/zsh-snap/znap.zsh ]] ||
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git ~/.zsh/zsh-snap

source ~/.zsh/zsh-snap/znap.zsh  # Start Znap

znap source ohmyzsh/ohmyzsh lib/{git,theme-and-appearance}
znap prompt ohmyzsh/ohmyzsh themes/robbyrussell

znap source ohmyzsh/ohmyzsh plugins/git
znap source ohmyzsh/ohmyzsh plugins/tmux
znap source ohmyzsh/ohmyzsh plugins/z
znap source ohmyzsh/ohmyzsh plugins/gitfast
znap source ohmyzsh/ohmyzsh plugins/common-aliases
# Load completion library for those sweet [tab] squares
znap source ohmyzsh/ohmyzsh lib/completion
# Load key-bindings otherwise shift+tab doesn't cycle backwards
znap source ohmyzsh/ohmyzsh lib/key-bindings

znap source lukechilds/zsh-nvm

znap source zsh-users/zsh-syntax-highlighting

# enable history
export HISTFILE=~/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000

if [ -f ~/.iterm2_shell_integration.zsh ]; then
    source ~/.iterm2_shell_integration.zsh
fi

autoload -U compinit && compinit
zmodload -i zsh/complist

# keep zsh in emacs mode
bindkey -e

bindkey '^R' history-incremental-search-backward
bindkey "^P" up-line-or-search

# You may need to manually set your language environment
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8

# https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
GPG_TTY=$(tty)
export GPG_TTY

REALLINK="$(readlink -f ~/.zshrc)"
DOTFILES_PATH="$(dirname $REALLINK)/../../../"

if [ -f $HOME/.zsh/path.zsh ]; then
    source $HOME/.zsh/path.zsh
fi

if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

alias rssh='rsync --progress -avz -e "/usr/bin/ssh"'

# make nvim the default vim
alias vim='nvim'
alias vi='nvim'

export EDITOR="nvim"

function current_epoch() {
    zmodload zsh/datetime
    echo $(( EPOCHSECONDS / 60 / 60 / 24 ))
}

function update_last_updated_file() {
    echo "LAST_EPOCH=$(current_epoch)" >! "${HOME}/.dotfiles-epoch"
}

check_dotfiles() {
    if (( $(git status --porcelain=v1 2>/dev/null | wc -l) )); then
        echo "[dotfiles] uncommited changes, consider adding them and push upstream"
    fi

    git remote -v update > /dev/null 2>&1
    UPSTREAM=${1:-'@{u}'}
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse "$UPSTREAM")
    BASE=$(git merge-base @ "$UPSTREAM")

    if [ $LOCAL = $REMOTE ]; then
        update_last_updated_file
    elif [ $LOCAL = $BASE ]; then
        echo "[dotfiles] please update your local head with: update_dotfiles"
    elif [ $REMOTE = $BASE ]; then
        echo "[dotfiles] unpushed changes, consider pushing upstream"
    else
        echo "[dotfiles] diverged, try merge local changes with remote head"
    fi
}

update_dotfiles() {
    echo "[dotfiles] pulling"
    (cd $DOTFILES_PATH && git pull)
}


function daily_dotfiles_check() {
    if ! source "${HOME}/.dotfiles-epoch" 2>/dev/null || [[ -z "$LAST_EPOCH" ]]; then
        update_last_updated_file
        LAST_EPOCH=$(current_epoch)
    fi

    epoch_target=1
    if (( ( $(current_epoch) - $LAST_EPOCH ) >= $epoch_target )); then
        (cd $DOTFILES_PATH && check_dotfiles)
    fi
}

daily_dotfiles_check

# vgrep fzf mode
vgrep() {
  INITIAL_QUERY="$1"
  VGREP_PREFIX="vgrep --no-header "
  FZF_DEFAULT_COMMAND="$VGREP_PREFIX '$INITIAL_QUERY'" \
  fzf --bind "change:reload:$VGREP_PREFIX {q} || true" --ansi --phony --tac --query "$INITIAL_QUERY" \
  | awk '{print $1}' | xargs -I{} -o vgrep --show {}
}

# git prompt for worktrees
git_worktree_prompt_info() {
    # copied from https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/git.zsh#L12
    # If we are on a folder not tracked by git, get out.
    # Otherwise, check for hide-info at global and local repository level
    if ! __git_prompt_git rev-parse --git-dir &> /dev/null \
        || [[ "$(__git_prompt_git config --get oh-my-zsh.hide-info 2>/dev/null)" == 1 ]]; then
        return 0
    fi

    local ref
    ref=$(__git_prompt_git symbolic-ref --short HEAD 2> /dev/null) \
    || ref=$(__git_prompt_git describe --tags --exact-match HEAD 2> /dev/null) \
    || ref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null) \
    || return 0

    # Use global ZSH_THEME_GIT_SHOW_UPSTREAM=1 for including upstream remote info
    local upstream
    if (( ${+ZSH_THEME_GIT_SHOW_UPSTREAM} )); then
        upstream=$(__git_prompt_git rev-parse --abbrev-ref --symbolic-full-name "@{upstream}" 2>/dev/null) \
        && upstream=" -> ${upstream}"
    fi

    local worktree
    if (( ${+ZSH_THEME_GIT_WORKTREE_SHOW_REPO} )); then
        worktree=$(basename $(git rev-parse --path-format=absolute --git-common-dir))/
        worktree="${worktree/.git/}"
        if [ "$worktree" = "/" ]; then
            worktree=
        fi
    fi

    echo "${ZSH_THEME_GIT_PROMPT_PREFIX}${worktree:gs/%/%%}${ref:gs/%/%%}${upstream:gs/%/%%}$(parse_git_dirty)${ZSH_THEME_GIT_PROMPT_SUFFIX}"
}

ZSH_THEME_GIT_WORKTREE_SHOW_REPO=1
PROMPT="${PROMPT/git_prompt_info/git_worktree_prompt_info}"

# discord notify
notify() {
    if [ -z ${DISCORD_WEBHOOK_URL+x} ]; then
        echo "need to set DISCORD_WEBHOOK_URL to work!"
        return 1
    fi
    if [ $# -lt 1 ]; then
        echo "need to specify message"
        return 1
    fi
    curl \
        -H "Content-Type: application/json" \
        -d "{\"username\": \"$(hostname)\", \"content\": \"$1\"}" \
        $DISCORD_WEBHOOK_URL
}

preexec () {
    # Note the date when the command started, in unix time.
    CMD_START_DATE=$(date +%s)
    # Store the command that we're running.
    CMD_NAME=$1
}
precmd () {
    # Proceed only if we've ran a command in the current shell.
    if ! [[ -z $CMD_START_DATE ]]; then
        # Note current date in unix time
        CMD_END_DATE=$(date +%s)
        # Store the difference between the last command start date vs. current date.
        CMD_ELAPSED_TIME=$(($CMD_END_DATE - $CMD_START_DATE))
        # Store an arbitrary threshold, in seconds.
        CMD_NOTIFY_THRESHOLD=60

        if [ -z ${DISCORD_WEBHOOK_URL+x} ]; then
            return 0
        fi
        if [[ $CMD_ELAPSED_TIME -gt $CMD_NOTIFY_THRESHOLD ]]; then
            # Send a notification
            echo "DONE!"
            notify "The command \`$CMD_NAME\` has finished."
        fi
    fi
}
